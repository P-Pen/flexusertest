import{r as V,J as U,o as p,g as c,a as l,u as e,b as u,w as m,c as C,h as y,d,f as n,e as i,F as X,D as O,t as N}from"./app-BYx064nO.js";import{_ as b,a as g}from"./app-BuHt2kYS.js";import{C as x}from"./app-IrmNFWm4.js";import{_ as h}from"./app-C5GVF480.js";import{_ as H}from"./app-e1i_B4SR.js";import{_}from"./app--BlRpVz_.js";import{_ as F}from"./app-Bx5jiAm1.js";import{_ as $}from"./app-EcaQJ64L.js";import{D as S}from"./app-D0jdtzyy.js";const D=["value"],E=["value"],B=l("td",{class:"title"},"启用源站",-1),L=l("p",{class:"comment"},"选中后，所有源站设置才会生效。",-1),J=l("td",null,[n("回源主机名"),l("em",null,"（Host）")],-1),Y={style:{"margin-top":"0.8em"}},A={class:"comment"},G={key:0},j={key:1},z={key:2},K=l("td",null,"回源主机名移除端口",-1),M=l("p",{class:"comment"},"选中后表示移除回源主机名中的端口部分。",-1),Q=l("td",null,"回源跟随",-1),W=l("p",{class:"comment"},"选中后，自动读取源站跳转后的网页内容。",-1),Z=l("td",null,"自动添加报头",-1),ee=l("div",{style:{clear:"both"}},null,-1),le=l("p",{class:"comment"},"选中后，会自动向源站请求添加这些报头，以便于源站获取客户端信息。",-1),oe=l("td",null,[n("请求URI"),l("em",null,"（RequestURI）")],-1),te=l("p",{class:"comment"},'${requestURI}为完整的请求URI，可以使用类似于"${requestURI}?arg1=value1&arg2=value2"的形式添加你的参数。',-1),se=l("td",null,[n("去除URL前缀"),l("em",null,"（StripPrefix）")],-1),ne={class:"comment"},ue={key:0},re=l("td",null,[n("自动刷新缓存区"),l("em",null,"（AutoFlush）")],-1),ae=l("p",{class:"comment"},"开启后将自动刷新缓冲区数据到客户端，在类似于SSE（server-sent events）等场景下很有用。",-1),de=l("td",null,"自动重试50X",-1),ie=l("p",{class:"comment"},"选中后，表示当源站返回状态码为50X（比如502、504等）时，自动重试其他源站。",-1),me=l("td",null,"自动重试40X",-1),pe=l("p",{class:"comment"},"选中后，表示当源站返回状态码为40X（403或404）时，自动重试其他源站。",-1),ce=l("td",null,"PROXY Protocol",-1),fe=l("p",{class:"comment"},"选中后表示启用PROXY Protocol，每次连接源站时都会在头部写入客户端地址信息。",-1),ye=l("td",null,"PROXY Protocol版本",-1),_e={key:0,class:"comment"},ve={key:1,class:"comment"},Ce={__name:"ReverseProxyBox",props:["v-reverse-proxy-ref","v-reverse-proxy-config","v-is-location","v-is-group","v-family"],setup(I){const v=I,{reverseProxyRef:f,reverseProxyConfig:t,advancedVisible:q,family:r,forwardHeaders:R}=function(){let a=v.vReverseProxyRef;a==null&&(a={isPrior:!1,isOn:!1,reverseProxyId:0});let o=v.vReverseProxyConfig;o==null&&(o={requestPath:"",stripPrefix:"",requestURI:"",requestHost:"",requestHostType:0,requestHostExcludingPort:!1,addHeaders:[],connTimeout:{count:0,unit:"second"},readTimeout:{count:0,unit:"second"},idleTimeout:{count:0,unit:"second"},maxConns:0,maxIdleConns:0,followRedirects:!1,retry50X:!1,retry40X:!1}),o.addHeaders==null&&(o.addHeaders=[]),o.connTimeout==null&&(o.connTimeout={count:0,unit:"second"}),o.readTimeout==null&&(o.readTimeout={count:0,unit:"second"}),o.idleTimeout==null&&(o.idleTimeout={count:0,unit:"second"}),o.proxyProtocol==null&&(o.proxyProtocol={isOn:!1,version:1});let s=[{name:"X-Real-IP",isChecked:!1},{name:"X-Forwarded-For",isChecked:!1},{name:"X-Forwarded-By",isChecked:!1},{name:"X-Forwarded-Host",isChecked:!1},{name:"X-Forwarded-Proto",isChecked:!1}];return s.forEach(function(P){P.isChecked=o.addHeaders.$contains(P.name)}),{reverseProxyRef:V(a),reverseProxyConfig:V(o),advancedVisible:V(!1),family:V(v.vFamily),forwardHeaders:V(s)}}(),T=function(){return v.vIsLocation||v.vIsGroup?f.value.isPrior&&f.value.isOn:f.value.isOn},k=function(a){q.value=a},w=function(){t.value.addHeaders=R.value.filter(function(a){return a.isChecked}).map(function(a){return a.name})};return U(()=>t.value.requestHostType,function(a){let o=parseInt(a);isNaN(o)&&(o=0),t.value.requestHostType=o}),U(()=>t.value.proxyProtocol.version,function(a){let o=parseInt(a);isNaN(o)&&(o=1),t.value.proxyProtocol.version=o}),(a,o)=>(p(),c("div",null,[l("input",{type:"hidden",name:"reverseProxyRefJSON",value:JSON.stringify(e(f))},null,8,D),l("input",{type:"hidden",name:"reverseProxyJSON",value:JSON.stringify(e(t))},null,8,E),u(S,null,{default:m(()=>[a.vIsLocation||a.vIsGroup?(p(),C(F,{key:0,"v-config":e(f)},null,8,["v-config"])):y("",!0),d(l("tbody",null,[l("tr",null,[B,l("td",null,[u(_,{modelValue:e(f).isOn,"onUpdate:modelValue":o[0]||(o[0]=s=>e(f).isOn=s)},null,8,["modelValue"]),L])]),d(l("tr",null,[J,l("td",null,[u(H,{value:0,modelValue:e(t).requestHostType,"onUpdate:modelValue":o[1]||(o[1]=s=>e(t).requestHostType=s)},{default:m(()=>[n("跟随CDN域名")]),_:1},8,["modelValue"]),n("   "),u(H,{value:1,modelValue:e(t).requestHostType,"onUpdate:modelValue":o[2]||(o[2]=s=>e(t).requestHostType=s)},{default:m(()=>[n("跟随源站")]),_:1},8,["modelValue"]),n("   "),u(H,{value:2,modelValue:e(t).requestHostType,"onUpdate:modelValue":o[3]||(o[3]=s=>e(t).requestHostType=s)},{default:m(()=>[n("自定义")]),_:1},8,["modelValue"]),d(l("div",Y,[u(h,{type:"text",placeholder:"比如example.com",modelValue:e(t).requestHost,"onUpdate:modelValue":o[4]||(o[4]=s=>e(t).requestHost=s),class:"w-full"},null,8,["modelValue"])],512),[[i,e(t).requestHostType==2]]),l("p",A,[n("请求源站时的主机名（Host），用于修改源站接收到的域名 "),e(t).requestHostType==0?(p(),c("span",G,'，"跟随CDN域名"是指源站接收到的域名和当前CDN访问域名保持一致')):y("",!0),e(t).requestHostType==1?(p(),c("span",j,'，"跟随源站"是指源站接收到的域名仍然是填写的源站地址中的信息，不随代理服务域名改变而改变')):y("",!0),e(t).requestHostType==2?(p(),c("span",z,"，自定义Host内容中支持请求变量")):y("",!0),n("。")])])],512),[[i,e(r)==null||e(r)=="http"]]),d(l("tr",null,[K,l("td",null,[u(_,{modelValue:e(t).requestHostExcludingPort,"onUpdate:modelValue":o[5]||(o[5]=s=>e(t).requestHostExcludingPort=s)},null,8,["modelValue"]),M])],512),[[i,e(r)==null||e(r)=="http"]])],512),[[i,!a.vIsLocation&&!a.vIsGroup||e(f).isPrior]]),T()?(p(),C($,{key:1,onChange:k})):y("",!0),d(l("tbody",null,[d(l("tr",null,[Q,l("td",null,[u(_,{modelValue:e(t).followRedirects,"onUpdate:modelValue":o[6]||(o[6]=s=>e(t).followRedirects=s)},null,8,["modelValue"]),W])],512),[[i,e(r)==null||e(r)=="http"]]),d(l("tr",null,[Z,l("td",null,[l("div",null,[(p(!0),c(X,null,O(e(R),s=>(p(),c("div",{style:{width:"14em",float:"left","margin-bottom":"1em"},key:s.name},[u(_,{modelValue:s.isChecked,"onUpdate:modelValue":P=>s.isChecked=P,onInput:w},{default:m(()=>[n(N(s.name),1)]),_:2},1032,["modelValue","onUpdate:modelValue"])]))),128)),ee]),le])],512),[[i,e(r)==null||e(r)=="http"]]),d(l("tr",null,[oe,l("td",null,[u(h,{type:"text",placeholder:"${requestURI}",modelValue:e(t).requestURI,"onUpdate:modelValue":o[7]||(o[7]=s=>e(t).requestURI=s),class:"w-full"},null,8,["modelValue"]),te])],512),[[i,e(r)==null||e(r)=="http"]]),d(l("tr",null,[se,l("td",null,[u(h,{type:"text",modelValue:e(t).stripPrefix,"onUpdate:modelValue":o[8]||(o[8]=s=>e(t).stripPrefix=s),placeholder:"/PREFIX",class:"w-full"},null,8,["modelValue"]),l("p",ne,[n("可以把请求的路径部分前缀去除后再查找文件，比如把 "),u(x,null,{default:m(()=>[n("/web/app/index.html")]),_:1}),n(" 去除前缀 "),u(x,null,{default:m(()=>[n("/web")]),_:1}),n(" 后就变成 "),u(x,null,{default:m(()=>[n("/app/index.html")]),_:1}),n(" 。 ")])])],512),[[i,e(r)==null||e(r)=="http"]]),e(r)==null||e(r)=="http"?(p(),c("tr",ue,[re,l("td",null,[u(_,{modelValue:e(t).autoFlush,"onUpdate:modelValue":o[9]||(o[9]=s=>e(t).autoFlush=s)},null,8,["modelValue"]),ae])])):y("",!0),d(l("tr",null,[de,l("td",null,[u(_,{modelValue:e(t).retry50X,"onUpdate:modelValue":o[10]||(o[10]=s=>e(t).retry50X=s)},null,8,["modelValue"]),ie])],512),[[i,e(r)==null||e(r)=="http"]]),d(l("tr",null,[me,l("td",null,[u(_,{modelValue:e(t).retry40X,"onUpdate:modelValue":o[11]||(o[11]=s=>e(t).retry40X=s)},null,8,["modelValue"]),pe])],512),[[i,e(r)==null||e(r)=="http"]]),d(l("tr",null,[ce,l("td",null,[u(_,{name:"proxyProtocolIsOn",modelValue:e(t).proxyProtocol.isOn,"onUpdate:modelValue":o[12]||(o[12]=s=>e(t).proxyProtocol.isOn=s)},null,8,["modelValue"]),fe])],512),[[i,e(r)!="unix"]]),d(l("tr",null,[ye,l("td",null,[u(b,{name:"proxyProtocolVersion",modelValue:e(t).proxyProtocol.version,"onUpdate:modelValue":o[13]||(o[13]=s=>e(t).proxyProtocol.version=s)},{default:m(()=>[u(g,{value:"1"},{default:m(()=>[n("1")]),_:1}),u(g,{value:"2"},{default:m(()=>[n("2")]),_:1})]),_:1},8,["modelValue"]),e(t).proxyProtocol.version==1?(p(),c("p",_e,[n("发送类似于 "),u(x,null,{default:m(()=>[n("PROXY TCP4 192.168.1.1 192.168.1.10 32567 443")]),_:1}),n(" 的头部信息。 ")])):y("",!0),e(t).proxyProtocol.version==2?(p(),c("p",ve,"发送二进制格式的头部信息。")):y("",!0)])],512),[[i,e(r)!="unix"&&e(t).proxyProtocol.isOn]])],512),[[i,T()&&e(q)]])]),_:1})]))}};export{Ce as _};
